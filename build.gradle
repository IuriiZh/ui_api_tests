plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.qameta.allure-adapter' version '2.11.2'
}

group = 'org.example'
version = '1.0-SNAPSHOT'
ext {
    allureVersion = '2.29.1'
}

sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    aspectjVersion = '1.9.24'
}

dependencies {
    // Main dependencies
    implementation 'com.codeborne:selenide:7.11.1'
    implementation 'io.rest-assured:rest-assured:5.5.6'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.20.0'
    implementation 'io.qameta.allure:allure-java-commons:2.21.0'
    implementation 'io.qameta.allure:allure-hamcrest:2.21.0'
    implementation 'io.qameta.allure:allure-rest-assured:2.21.0'
    implementation 'io.qameta.allure:allure-selenide:2.21.0'
    implementation 'io.qameta.allure:allure-junit5:2.21.0'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    implementation 'org.slf4j:slf4j-api:2.0.5'
    implementation 'org.hamcrest:hamcrest:2.2'
    implementation 'log4j:log4j:1.2.17'
    implementation 'org.junit.vintage:junit-vintage-engine:5.7.0'

    implementation ("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter-api"
        exclude group: "org.junit.platform"
        exclude group: "org.junit.jupiter"
    }

    // Provided dependencies
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Test dependencies
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.3'
    testImplementation 'io.rest-assured:json-schema-validator:5.5.6'

    // Runtime dependencies
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.0-alpha5'

    // AspectJ for Allure
    testImplementation "org.aspectj:aspectjweaver:${aspectjVersion}"

}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    systemProperty 'allure.results.directory', 'build/allure-results'

    ignoreFailures = true

    jvmArgs = [
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('aspectjweaver') }}"
    ]
}

allure {
    version = '2.21.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                   : true,
                'junit.jupiter.execution.parallel.mode.default'              : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'      : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'           : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism'  : System.getProperty("threads").toInteger(),
                'junit.jupiter.execution.parallel.config.fixed.max-pool-size': System.getProperty("threads").toInteger()
        ]
    }
}

tasks.register('orderTags', Test) {
    useJUnitPlatform {
        includeTags(System.getProperty('tag', 'NONE'))
    }
}